[project]
name = "qblog"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "api-analytics>=1.2.7",
    "blinker==1.7.0",
    "click==8.1.7",
    "colorama==0.4.6",
    "flask==3.0.2",
    "flask-caching>=2.3.1",
    "flask-sqlalchemy==3.1.1",
    "greenlet>=3.2.2",
    "itsdangerous==2.1.2",
    "jinja2==3.1.3",
    "markupsafe==2.1.5",
    "psycopg2-binary>=2.9.10",
    "python-dotenv==1.0.1",
    "python-slugify==8.0.4",
    "redis>=6.1.0",
    "sentry-sdk[flask]>=2.30.0",
    "sqlalchemy==2.0.30",
    "text-unidecode==1.3",
    "typing-extensions==4.11.0",
    "werkzeug==3.0.1",
]

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",     # Import errors
    "E7",     # Statement errors  
    "E9",     # Runtime errors
    "F",      # Pyflakes
    "B",      # flake8-bugbear
    "S",      # flake8-bandit (security)
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "C4",     # flake8-comprehensions
    "PIE",    # flake8-pie
]

ignore = [
    "S101",   # Use of assert detected
    "S201",   # Use of debug=True in Flask app (fine for development)
    "E501",   # Line too long (let formatter handle this)
    "E402",   # Module level import not at top of file (sometimes needed)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[dependency-groups]
dev = [
    "ruff>=0.12.7",
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"test_*.py" = ["S101", "S105", "S106"]
"*_test.py" = ["S101", "S105", "S106"]

[tool.ruff.lint.isort]
known-first-party = ["app", "articles", "database", "projects"]
